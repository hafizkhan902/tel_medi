import React, { useState, useRef, useEffect } from 'react';

function Dashboard({ onSignOut }) {
  const [activeSection, setActiveSection] = useState('ai-chat');
  const [messages, setMessages] = useState([
    {
      sender: 'ai',
      content: 'Hello! I\'m your AI healthcare assistant. How can I help you today?',
      timestamp: new Date().toISOString()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const messagesEndRef = useRef(null);
  const fileInputRef = useRef(null);
  const [isRecording, setIsRecording] = useState(false);
  const [isVideoActive, setIsVideoActive] = useState(false);
  const [isCameraActive, setIsCameraActive] = useState(false);
  
  // Prescription state
  const [prescriptions, setPrescriptions] = useState([
    {
      id: 'RX12345',
      date: new Date(2023, 5, 15).toISOString(),
      diagnosis: 'Seasonal Allergic Rhinitis',
      status: 'approved',
      medications: [
        { name: 'Loratadine', dosage: '10mg', frequency: 'Once daily', duration: '14 days' },
        { name: 'Fluticasone Nasal Spray', dosage: '50mcg', frequency: 'Twice daily', duration: '14 days' }
      ],
      doctor: {
        name: 'Dr. Sarah Johnson',
        specialty: 'Allergy & Immunology',
        approved: true,
        approvalDate: new Date(2023, 5, 16).toISOString()
      },
      pharmacy: {
        name: 'MediCare Pharmacy',
        address: '123 Health St, Medical District',
        status: 'delivered',
        deliveryDate: new Date(2023, 5, 17).toISOString()
      },
      notes: 'Take with food. Avoid known allergens. Follow up in two weeks if symptoms persist.'
    },
    {
      id: 'RX12346',
      date: new Date(2023, 6, 2).toISOString(),
      diagnosis: 'Acute Bronchitis',
      status: 'pending',
      medications: [
        { name: 'Amoxicillin', dosage: '500mg', frequency: 'Three times daily', duration: '7 days' },
        { name: 'Dextromethorphan', dosage: '30mg', frequency: 'Every 6-8 hours as needed', duration: '7 days' }
      ],
      doctor: {
        name: 'Awaiting Doctor Review',
        specialty: 'General Medicine',
        approved: false,
        approvalDate: null
      },
      pharmacy: {
        name: 'Not yet assigned',
        address: '',
        status: 'waiting',
        deliveryDate: null
      },
      notes: 'AI-generated prescription awaiting doctor approval. Rest and increase fluid intake recommended.'
    },
    {
      id: 'RX12347',
      date: new Date(2023, 6, 20).toISOString(),
      diagnosis: 'Tension Headache',
      status: 'in-review',
      medications: [
        { name: 'Acetaminophen', dosage: '500mg', frequency: 'Every 6 hours as needed', duration: '3 days' },
        { name: 'Cyclobenzaprine', dosage: '5mg', frequency: 'Once daily at bedtime', duration: '5 days' }
      ],
      doctor: {
        name: 'Dr. Michael Lee',
        specialty: 'Neurology',
        approved: false,
        approvalDate: null
      },
      pharmacy: {
        name: 'Not yet assigned',
        address: '',
        status: 'waiting',
        deliveryDate: null
      },
      notes: 'Currently under doctor review. Prescription may be modified.'
    }
  ]);
  
  const [selectedPrescription, setSelectedPrescription] = useState(null);
  const [prescriptionView, setPrescriptionView] = useState('list'); // 'list' or 'detail'

  // Appointment state
  const [appointments, setAppointments] = useState([
    {
      id: 'APT1001',
      type: 'Video Consultation',
      status: 'scheduled',
      dateTime: new Date(2023, 8, 5, 10, 30).toISOString(),
      duration: 30, // minutes
      doctor: {
        id: 'DOC101',
        name: 'Dr. Emily Wilson',
        specialty: 'General Practitioner',
        imageUrl: null,
        bio: 'Specializes in preventive care and chronic disease management.'
      },
      reason: 'Follow-up on recent diagnosis and treatment plan',
      notes: 'Please be ready 5 minutes before appointment time. Have your recent medication list available.',
      meetingLink: 'https://meet.aitelemedicine.com/room/apt1001',
      prescription: 'RX12345' // Reference to a prescription ID if related
    },
    {
      id: 'APT1002',
      type: 'In-person Visit',
      status: 'completed',
      dateTime: new Date(2023, 7, 15, 14, 0).toISOString(),
      duration: 45, // minutes
      doctor: {
        id: 'DOC102',
        name: 'Dr. Sarah Johnson',
        specialty: 'Allergy & Immunology',
        imageUrl: null,
        bio: 'Expert in treating allergies and immune system disorders.'
      },
      reason: 'Allergic rhinitis consultation and treatment',
      notes: 'Patient reported improved symptoms after 2 weeks of treatment. Recommended continuing current medication for another month.',
      location: {
        name: 'City Health Medical Center',
        address: '125 Medical Parkway, Suite 300',
        city: 'Healthville',
        zipCode: '12345',
        phoneNumber: '(555) 123-4567'
      },
      prescription: 'RX12345'
    },
    {
      id: 'APT1003',
      type: 'Video Consultation',
      status: 'cancelled',
      dateTime: new Date(2023, 7, 20, 11, 0).toISOString(),
      duration: 30, // minutes
      doctor: {
        id: 'DOC103',
        name: 'Dr. Michael Lee',
        specialty: 'Neurology',
        imageUrl: null,
        bio: 'Specializes in headaches, migraines, and neurological disorders.'
      },
      reason: 'Recurring headache evaluation',
      notes: 'Cancelled by patient. Reason: Feeling better',
      meetingLink: 'https://meet.aitelemedicine.com/room/apt1003',
      prescription: null
    },
    {
      id: 'APT1004',
      type: 'Video Consultation',
      status: 'pending',
      dateTime: new Date(2023, 9, 10, 13, 0).toISOString(),
      duration: 30, // minutes
      doctor: {
        id: 'DOC104',
        name: 'Dr. James Robinson',
        specialty: 'Pulmonology',
        imageUrl: null,
        bio: 'Focuses on respiratory conditions and breathing disorders.'
      },
      reason: 'Bronchitis follow-up and treatment assessment',
      notes: 'Awaiting doctor confirmation. You will be notified once confirmed.',
      meetingLink: null,
      prescription: 'RX12346'
    }
  ]);
  
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [appointmentView, setAppointmentView] = useState('list'); // 'list', 'detail', or 'calendar'

  // Auto-scroll to bottom of messages
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (inputText.trim() === '') return;

    // Add user message
    const userMessage = {
      sender: 'user',
      content: inputText,
      timestamp: new Date().toISOString()
    };
    
    setMessages([...messages, userMessage]);
    setInputText('');
    
    // Simulate AI response after a short delay
    setTimeout(() => {
      const aiResponse = {
        sender: 'ai',
        content: 'I\'m analyzing your symptoms. Could you provide more details about how you\'re feeling?',
        timestamp: new Date().toISOString()
      };
      setMessages(prevMessages => [...prevMessages, aiResponse]);
    }, 1000);
  };

  const toggleVoiceRecording = () => {
    setIsRecording(!isRecording);
    if (!isRecording) {
      // Simulate starting voice recording
      setInputText(inputText + "[Voice recording started...]");
      // In a real app, you would implement actual voice recording functionality here
    } else {
      // Simulate stopping voice recording
      setInputText(inputText.replace("[Voice recording started...]", "[Voice message recorded]"));
      // In a real app, you would process the recorded voice here
    }
  };

  const toggleVideoCall = () => {
    setIsVideoActive(!isVideoActive);
    if (!isVideoActive) {
      // Add a system message about video call
      const systemMessage = {
        sender: 'system',
        content: 'Video consultation requested. Connecting to AI health assistant...',
        timestamp: new Date().toISOString()
      };
      setMessages([...messages, systemMessage]);
      
      // Simulate AI joining video call
      setTimeout(() => {
        const aiResponse = {
          sender: 'ai',
          content: 'I\'ve joined the video consultation. I can see you now. How can I help with your health concerns today?',
          timestamp: new Date().toISOString()
        };
        setMessages(prevMessages => [...prevMessages, aiResponse]);
      }, 1500);
    } else {
      // Add a system message about ending video call
      const systemMessage = {
        sender: 'system',
        content: 'Video consultation ended.',
        timestamp: new Date().toISOString()
      };
      setMessages([...messages, systemMessage]);
    }
  };

  const toggleCamera = () => {
    setIsCameraActive(!isCameraActive);
    if (!isCameraActive) {
      // Add a system message about camera activation
      const systemMessage = {
        sender: 'system',
        content: 'Camera activated. You can now take a photo to share with the AI.',
        timestamp: new Date().toISOString()
      };
      setMessages([...messages, systemMessage]);
    } else {
      // Simulate taking a photo and sending it
      const userMessage = {
        sender: 'user',
        content: '[Image captured and sent]',
        timestamp: new Date().toISOString(),
        hasImage: true
      };
      setMessages([...messages, userMessage]);
      
      // Simulate AI response to the image
      setTimeout(() => {
        const aiResponse = {
          sender: 'ai',
          content: 'I\'ve received your image. Based on what I can see, it appears to be a mild skin irritation. Can you tell me if it\'s itchy or painful?',
          timestamp: new Date().toISOString()
        };
        setMessages(prevMessages => [...prevMessages, aiResponse]);
      }, 1500);
    }
  };

  const handleFileUpload = () => {
    fileInputRef.current.click();
  };

  const onFileSelected = (e) => {
    const files = e.target.files;
    if (files.length > 0) {
      const fileName = files[0].name;
      
      // Add a user message with the file
      const userMessage = {
        sender: 'user',
        content: `[File uploaded: ${fileName}]`,
        timestamp: new Date().toISOString(),
        hasFile: true,
        fileName: fileName
      };
      setMessages([...messages, userMessage]);
      
      // Simulate AI response to the file
      setTimeout(() => {
        const aiResponse = {
          sender: 'ai',
          content: `I've received your file "${fileName}". I'll analyze this and get back to you shortly.`,
          timestamp: new Date().toISOString()
        };
        setMessages(prevMessages => [...prevMessages, aiResponse]);
      }, 1000);
    }
    // Clear the input so the same file can be uploaded again if needed
    e.target.value = '';
  };

  const formatTime = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  // Format date for display
  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  // View prescription details
  const viewPrescriptionDetail = (id) => {
    const prescription = prescriptions.find(p => p.id === id);
    setSelectedPrescription(prescription);
    setPrescriptionView('detail');
  };

  // Return to prescription list
  const backToPrescriptionList = () => {
    setPrescriptionView('list');
    setSelectedPrescription(null);
  };

  // Get status color
  const getStatusColor = (status) => {
    switch (status) {
      case 'approved':
        return 'status-approved';
      case 'pending':
        return 'status-pending';
      case 'in-review':
        return 'status-in-review';
      case 'rejected':
        return 'status-rejected';
      case 'delivered':
        return 'status-delivered';
      case 'processing':
        return 'status-processing';
      case 'shipping':
        return 'status-shipping';
      default:
        return '';
    }
  };

  // View appointment detail
  const viewAppointmentDetail = (id) => {
    const appointment = appointments.find(a => a.id === id);
    setSelectedAppointment(appointment);
    setAppointmentView('detail');
  };
  
  // Back to appointment list
  const backToAppointmentList = () => {
    setAppointmentView('list');
    setSelectedAppointment(null);
  };
  
  // Calculate if an appointment is upcoming (within 24 hours)
  const isUpcoming = (dateTimeString) => {
    const appointmentDate = new Date(dateTimeString);
    const now = new Date();
    const diffTime = appointmentDate - now;
    const diffHours = diffTime / (1000 * 60 * 60);
    return diffHours > 0 && diffHours <= 24;
  };

  return (
    <div className="dashboard-container">
      {/* Left sidebar navigation */}
      <div className="dashboard-sidebar">
        <div className="sidebar-header">
          <div className="brand-logo">
            <h2><span className="ai-text">AI</span>MediCare</h2>
          </div>
        </div>
        
        <div className="user-profile-brief">
          <div className="user-avatar">
            <span>JD</span>
          </div>
          <div className="user-info">
            <h3>John Doe</h3>
            <p>Patient ID: #12345</p>
          </div>
        </div>
        
        <nav className="dashboard-nav">
          <ul>
            <li className={activeSection === 'ai-chat' ? 'active' : ''} onClick={() => setActiveSection('ai-chat')}>
              <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44A2.5 2.5 0 0 1 2 17.5v-10a2.5 2.5 0 0 1 5 0v.5a.5.5 0 0 0 1 0v-.5a2.5 2.5 0 1 1 5 0v10a2.5 2.5 0 0 1-5 0v-.5a.5.5 0 0 0-1 0v.5a2.5 2.5 0 1 1-5 0v-5a.5.5 0 0 0-1 0v5a2.5 2.5 0 0 1-4.96.44"></path>
              </svg>
              <span>AI Diagnosis</span>
            </li>
            <li className={activeSection === 'prescriptions' ? 'active' : ''} onClick={() => setActiveSection('prescriptions')}>
              <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M9 5H7a4 4 0 0 0-4 4v0a4 4 0 0 0 4 4h7m4-8h-3M1 19l3 3 3-3M6 11v.01M2 8v.01M4 15v.01"></path>
                <path d="M20 8a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2Z"></path>
              </svg>
              <span>Prescriptions</span>
            </li>
            <li className={activeSection === 'appointments' ? 'active' : ''} onClick={() => setActiveSection('appointments')}>
              <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="16" y1="2" x2="16" y2="6"></line>
                <line x1="8" y1="2" x2="8" y2="6"></line>
                <line x1="3" y1="10" x2="21" y2="10"></line>
              </svg>
              <span>Appointments</span>
            </li>
            <li className={activeSection === 'pharmacy' ? 'active' : ''} onClick={() => setActiveSection('pharmacy')}>
              <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M9 3h6v4H9zM9 7l3 13 3-13"></path>
              </svg>
              <span>Pharmacy</span>
            </li>
            <li className={activeSection === 'medical-records' ? 'active' : ''} onClick={() => setActiveSection('medical-records')}>
              <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <path d="M14 2v6h6"></path>
                <path d="M16 13H8"></path>
                <path d="M16 17H8"></path>
                <path d="M10 9H8"></path>
              </svg>
              <span>Medical Records</span>
            </li>
            <li className={activeSection === 'profile' ? 'active' : ''} onClick={() => setActiveSection('profile')}>
              <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
              <span>Profile</span>
            </li>
          </ul>
        </nav>
        
        <div className="sidebar-footer">
          <button className="signout-button" onClick={onSignOut}>
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
              <polyline points="16 17 21 12 16 7"></polyline>
              <line x1="21" y1="12" x2="9" y2="12"></line>
            </svg>
            <span>Sign Out</span>
          </button>
        </div>
      </div>

      {/* Main content area */}
      <div className="dashboard-main">
        {activeSection === 'ai-chat' && (
          <div className="ai-chat-section">
            <div className="chat-header">
              <h2>AI Diagnosis Assistant</h2>
              <div className="ai-status">
                <span className="status-dot active"></span>
                <span>AI Assistant Active</span>
              </div>
            </div>
            
            {isVideoActive && (
              <div className="video-conference-container">
                <div className="video-stream ai-stream">
                  <div className="video-placeholder">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44A2.5 2.5 0 0 1 2 17.5v-10a2.5 2.5 0 0 1 5 0v.5a.5.5 0 0 0 1 0v-.5a2.5 2.5 0 1 1 5 0v10a2.5 2.5 0 0 1-5 0v-.5a.5.5 0 0 0-1 0v.5a2.5 2.5 0 1 1-5 0v-5a.5.5 0 0 0-1 0v5a2.5 2.5 0 0 1-4.96.44"></path>
                    </svg>
                    <span>AI Health Assistant</span>
                  </div>
                </div>
                <div className="video-stream user-stream">
                  <div className="video-placeholder user">
                    <span>You</span>
                  </div>
                </div>
                <button className="end-video-call" onClick={toggleVideoCall}>
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M10.5 20.5 3 13l7.5-7.5"></path>
                    <path d="m13.5 20.5 7.5-7.5-7.5-7.5"></path>
                  </svg>
                  End Video Call
                </button>
              </div>
            )}
            
            {isCameraActive && (
              <div className="camera-capture-container">
                <div className="camera-preview">
                  <div className="camera-placeholder">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path>
                      <circle cx="12" cy="13" r="4"></circle>
                    </svg>
                    <span>Camera Preview</span>
                  </div>
                </div>
                <div className="camera-controls">
                  <button className="capture-photo" onClick={toggleCamera}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <circle cx="12" cy="12" r="10"></circle>
                    </svg>
                    Capture Photo
                  </button>
                  <button className="cancel-photo" onClick={() => setIsCameraActive(false)}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <line x1="18" y1="6" x2="6" y2="18"></line>
                      <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                    Cancel
                  </button>
                </div>
              </div>
            )}
            
            <div className="chat-container">
              <div className="chat-messages">
                {messages.map((message, index) => (
                  <div 
                    key={index} 
                    className={`chat-message ${message.sender === 'ai' ? 'ai' : message.sender === 'user' ? 'user' : 'system'}`}
                  >
                    {message.sender === 'ai' && (
                      <div className="message-avatar ai-avatar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44A2.5 2.5 0 0 1 2 17.5v-10a2.5 2.5 0 0 1 5 0v.5a.5.5 0 0 0 1 0v-.5a2.5 2.5 0 1 1 5 0v10a2.5 2.5 0 0 1-5 0v-.5a.5.5 0 0 0-1 0v.5a2.5 2.5 0 1 1-5 0v-5a.5.5 0 0 0-1 0v5a2.5 2.5 0 0 1-4.96.44"></path>
                        </svg>
                      </div>
                    )}
                    {message.sender === 'system' && (
                      <div className="message-avatar system-avatar">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <circle cx="12" cy="12" r="10"></circle>
                          <line x1="12" y1="8" x2="12" y2="12"></line>
                          <line x1="12" y1="16" x2="12.01" y2="16"></line>
                        </svg>
                      </div>
                    )}
                    <div className="message-content">
                      <div className="message-text">
                        {message.content}
                        {message.hasImage && (
                          <div className="message-image-preview">
                            <div className="image-placeholder">
                              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                                <circle cx="8.5" cy="8.5" r="1.5"></circle>
                                <polyline points="21 15 16 10 5 21"></polyline>
                              </svg>
                              <span>Image</span>
                            </div>
                          </div>
                        )}
                        {message.hasFile && (
                          <div className="message-file-preview">
                            <div className="file-placeholder">
                              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                <polyline points="14 2 14 8 20 8"></polyline>
                                <line x1="16" y1="13" x2="8" y2="13"></line>
                                <line x1="16" y1="17" x2="8" y2="17"></line>
                                <polyline points="10 9 9 9 8 9"></polyline>
                              </svg>
                              <span>{message.fileName}</span>
                            </div>
                          </div>
                        )}
                      </div>
                      <div className="message-time">{formatTime(message.timestamp)}</div>
                    </div>
                    {message.sender === 'user' && (
                      <div className="message-avatar user-avatar">
                        <span>JD</span>
                      </div>
                    )}
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
              
              <form className="chat-input" onSubmit={handleSendMessage}>
                <div className="media-options">
                  <button 
                    type="button" 
                    className={`media-option-btn ${isCameraActive ? 'active' : ''}`} 
                    onClick={toggleCamera}
                    title="Take a photo"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path>
                      <circle cx="12" cy="13" r="4"></circle>
                    </svg>
                  </button>
                  <button 
                    type="button" 
                    className={`media-option-btn ${isRecording ? 'active' : ''}`} 
                    onClick={toggleVoiceRecording}
                    title="Voice recording"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
                      <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
                      <line x1="12" y1="19" x2="12" y2="23"></line>
                      <line x1="8" y1="23" x2="16" y2="23"></line>
                    </svg>
                  </button>
                  <button 
                    type="button" 
                    className="media-option-btn" 
                    onClick={handleFileUpload}
                    title="Upload a file"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                      <polyline points="17 8 12 3 7 8"></polyline>
                      <line x1="12" y1="3" x2="12" y2="15"></line>
                    </svg>
                    <input 
                      type="file" 
                      ref={fileInputRef} 
                      style={{ display: 'none' }} 
                      onChange={onFileSelected}
                    />
                  </button>
                  <button 
                    type="button" 
                    className={`media-option-btn ${isVideoActive ? 'active' : ''}`} 
                    onClick={toggleVideoCall}
                    title="Video call"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <polygon points="23 7 16 12 23 17 23 7"></polygon>
                      <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                    </svg>
                  </button>
                </div>
                <div className="input-wrapper">
                  <input 
                    type="text" 
                    placeholder="Describe your symptoms or ask a question..." 
                    value={inputText}
                    onChange={(e) => setInputText(e.target.value)}
                  />
                  <button type="submit" className="send-button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <line x1="22" y1="2" x2="11" y2="13"></line>
                      <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                    </svg>
                  </button>
                </div>
              </form>
            </div>
            
            <div className="diagnosis-status">
              <h3>Current Diagnosis Status</h3>
              <div className="status-items">
                <div className="status-item">
                  <div className="status-label">AI Analysis:</div>
                  <div className="status-value">In Progress</div>
                  <div className="progress-bar">
                    <div className="progress" style={{width: '35%'}}></div>
                  </div>
                </div>
                <div className="status-item">
                  <div className="status-label">Doctor Review:</div>
                  <div className="status-value">Waiting</div>
                </div>
                <div className="status-item">
                  <div className="status-label">Expected Completion:</div>
                  <div className="status-value">~15 minutes</div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {activeSection === 'prescriptions' && (
          <div className="prescriptions-section">
            <div className="section-header">
              <h2>My Prescriptions</h2>
              <div className="section-actions">
                <div className="search-box">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  </svg>
                  <input type="text" placeholder="Search prescriptions..." />
                </div>
                <div className="filter-options">
                  <select>
                    <option value="all">All Prescriptions</option>
                    <option value="approved">Approved</option>
                    <option value="pending">Pending</option>
                    <option value="in-review">In Review</option>
                  </select>
                </div>
              </div>
            </div>
            
            {prescriptionView === 'list' ? (
              <div className="prescriptions-list">
                {prescriptions.map(prescription => (
                  <div key={prescription.id} className="prescription-card" onClick={() => viewPrescriptionDetail(prescription.id)}>
                    <div className="prescription-header">
                      <div className="prescription-id">{prescription.id}</div>
                      <div className={`prescription-status ${getStatusColor(prescription.status)}`}>
                        {prescription.status.charAt(0).toUpperCase() + prescription.status.slice(1)}
                      </div>
                    </div>
                    <div className="prescription-body">
                      <h3 className="prescription-diagnosis">{prescription.diagnosis}</h3>
                      <div className="prescription-date">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                          <line x1="16" y1="2" x2="16" y2="6"></line>
                          <line x1="8" y1="2" x2="8" y2="6"></line>
                          <line x1="3" y1="10" x2="21" y2="10"></line>
                        </svg>
                        <span>{formatDate(prescription.date)}</span>
                      </div>
                      <div className="prescription-medications">
                        <h4>Medications:</h4>
                        <ul>
                          {prescription.medications.map((med, index) => (
                            <li key={index}>{med.name} - {med.dosage}</li>
                          ))}
                        </ul>
                      </div>
                      <div className="prescription-footer">
                        <div className="doctor-info">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                            <circle cx="12" cy="7" r="4"></circle>
                          </svg>
                          <span>{prescription.doctor.name}</span>
                        </div>
                        <button className="view-details-btn">
                          View Details
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <line x1="5" y1="12" x2="19" y2="12"></line>
                            <polyline points="12 5 19 12 12 19"></polyline>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="prescription-detail">
                {selectedPrescription && (
                  <>
                    <div className="detail-header">
                      <button className="back-button" onClick={backToPrescriptionList}>
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <line x1="19" y1="12" x2="5" y2="12"></line>
                          <polyline points="12 19 5 12 12 5"></polyline>
                        </svg>
                        Back to Prescriptions
                      </button>
                      <div className="prescription-actions">
                        <button className="action-button print">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <polyline points="6 9 6 2 18 2 18 9"></polyline>
                            <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path>
                            <rect x="6" y="14" width="12" height="8"></rect>
                          </svg>
                          Print
                        </button>
                        <button className="action-button download">
                          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                            <polyline points="7 10 12 15 17 10"></polyline>
                            <line x1="12" y1="15" x2="12" y2="3"></line>
                          </svg>
                          Download
                        </button>
                      </div>
                    </div>
                    
                    <div className="prescription-detail-content">
                      <div className="prescription-overview">
                        <div className="prescription-header-detail">
                          <h2>{selectedPrescription.diagnosis}</h2>
                          <div className={`prescription-status ${getStatusColor(selectedPrescription.status)}`}>
                            {selectedPrescription.status.charAt(0).toUpperCase() + selectedPrescription.status.slice(1)}
                          </div>
                        </div>
                        <div className="prescription-meta">
                          <div className="meta-item">
                            <span className="label">Prescription ID:</span>
                            <span className="value">{selectedPrescription.id}</span>
                          </div>
                          <div className="meta-item">
                            <span className="label">Date Issued:</span>
                            <span className="value">{formatDate(selectedPrescription.date)}</span>
                          </div>
                          {selectedPrescription.doctor.approvalDate && (
                            <div className="meta-item">
                              <span className="label">Date Approved:</span>
                              <span className="value">{formatDate(selectedPrescription.doctor.approvalDate)}</span>
                            </div>
                          )}
                        </div>
                      </div>

                      <div className="prescription-sections">
                        <div className="prescription-section medications">
                          <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                              <path d="M9 5H7a4 4 0 0 0-4 4v0a4 4 0 0 0 4 4h7m4-8h-3M1 19l3 3 3-3M6 11v.01M2 8v.01M4 15v.01"></path>
                              <path d="M20 8a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2Z"></path>
                            </svg>
                            Medications
                          </h3>
                          <div className="medications-list">
                            {selectedPrescription.medications.map((med, index) => (
                              <div key={index} className="medication-item">
                                <div className="medication-name">{med.name}</div>
                                <div className="medication-details">
                                  <span className="dosage">{med.dosage}</span>
                                  <span className="separator">•</span>
                                  <span className="frequency">{med.frequency}</span>
                                  <span className="separator">•</span>
                                  <span className="duration">{med.duration}</span>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>

                        <div className="prescription-section doctor">
                          <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                              <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                              <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                            Doctor Information
                          </h3>
                          <div className="doctor-details">
                            <div className="doctor-name">{selectedPrescription.doctor.name}</div>
                            {selectedPrescription.doctor.specialty && (
                              <div className="doctor-specialty">{selectedPrescription.doctor.specialty}</div>
                            )}
                            <div className="approval-status">
                              {selectedPrescription.doctor.approved ? (
                                <div className="approved">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                    <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                  </svg>
                                  Approved
                                </div>
                              ) : (
                                <div className="pending-approval">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <circle cx="12" cy="12" r="10"></circle>
                                    <polyline points="12 6 12 12 16 14"></polyline>
                                  </svg>
                                  Awaiting Approval
                                </div>
                              )}
                            </div>
                          </div>
                        </div>

                        <div className="prescription-section pharmacy">
                          <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                              <path d="M9 3h6v4H9zM9 7l3 13 3-13"></path>
                            </svg>
                            Pharmacy & Delivery
                          </h3>
                          <div className="pharmacy-details">
                            <div className="pharmacy-name">{selectedPrescription.pharmacy.name}</div>
                            {selectedPrescription.pharmacy.address && (
                              <div className="pharmacy-address">{selectedPrescription.pharmacy.address}</div>
                            )}
                            <div className="delivery-status">
                              <div className={`status ${getStatusColor(selectedPrescription.pharmacy.status)}`}>
                                {selectedPrescription.pharmacy.status === 'delivered' ? (
                                  <>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                      <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                      <polyline points="22 4 12 14.01 9 11.01"></polyline>
                                    </svg>
                                    Delivered on {formatDate(selectedPrescription.pharmacy.deliveryDate)}
                                  </>
                                ) : (
                                  <>
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                      <circle cx="12" cy="12" r="10"></circle>
                                      <polyline points="12 6 12 12 16 14"></polyline>
                                    </svg>
                                    {selectedPrescription.pharmacy.status.charAt(0).toUpperCase() + selectedPrescription.pharmacy.status.slice(1)}
                                  </>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>

                        <div className="prescription-section notes">
                          <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                              <path d="M14 2v6h6"></path>
                              <path d="M16 13H8"></path>
                              <path d="M16 17H8"></path>
                              <path d="M10 9H8"></path>
                            </svg>
                            Notes & Instructions
                          </h3>
                          <div className="notes-content">
                            {selectedPrescription.notes}
                          </div>
                        </div>
                      </div>
                    </div>
                  </>
                )}
              </div>
            )}
          </div>
        )}
        
        {activeSection === 'appointments' && (
          <div className="appointments-section">
            <div className="section-header">
              <h2>My Appointments</h2>
              <div className="section-actions">
                <div className="search-box">
                  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                  </svg>
                  <input type="text" placeholder="Search appointments..." />
                </div>
                <div className="view-options">
                  <button className={appointmentView === 'list' ? 'active' : ''} onClick={() => setAppointmentView('list')}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <line x1="8" y1="6" x2="21" y2="6"></line>
                      <line x1="8" y1="12" x2="21" y2="12"></line>
                      <line x1="8" y1="18" x2="21" y2="18"></line>
                      <line x1="3" y1="6" x2="3.01" y2="6"></line>
                      <line x1="3" y1="12" x2="3.01" y2="12"></line>
                      <line x1="3" y1="18" x2="3.01" y2="18"></line>
                    </svg>
                    List
                  </button>
                  <button className={appointmentView === 'calendar' ? 'active' : ''} onClick={() => setAppointmentView('calendar')}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                      <line x1="16" y1="2" x2="16" y2="6"></line>
                      <line x1="8" y1="2" x2="8" y2="6"></line>
                      <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                    Calendar
                  </button>
                </div>
                <div className="filter-options">
                  <select>
                    <option value="all">All Appointments</option>
                    <option value="scheduled">Scheduled</option>
                    <option value="completed">Completed</option>
                    <option value="pending">Pending</option>
                    <option value="cancelled">Cancelled</option>
                  </select>
                </div>
              </div>
            </div>
            
            {appointmentView === 'list' && (
              <div className="appointments-list">
                <div className="upcoming-appointments">
                  {appointments.some(apt => apt.status === 'scheduled' && isUpcoming(apt.dateTime)) && (
                    <div className="list-section-header">
                      <h3>Upcoming Appointments</h3>
                    </div>
                  )}
                  
                  {appointments
                    .filter(apt => apt.status === 'scheduled' && isUpcoming(apt.dateTime))
                    .sort((a, b) => new Date(a.dateTime) - new Date(b.dateTime))
                    .map(appointment => (
                      <div key={appointment.id} className="appointment-card upcoming" onClick={() => viewAppointmentDetail(appointment.id)}>
                        <div className="appointment-time">
                          <div className="time-label">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                              <circle cx="12" cy="12" r="10"></circle>
                              <polyline points="12 6 12 12 16 14"></polyline>
                            </svg>
                            <span>Today</span>
                          </div>
                          <div className="time">{formatTime(appointment.dateTime)}</div>
                        </div>
                        
                        <div className="appointment-content">
                          <div className="appointment-header">
                            <div className="appointment-type">{appointment.type}</div>
                            <div className={`appointment-status ${getAppointmentStatusColor(appointment.status)}`}>
                              {appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}
                            </div>
                          </div>
                          
                          <div className="appointment-doctor">
                            <div className="doctor-avatar">
                              {appointment.doctor.imageUrl ? (
                                <img src={appointment.doctor.imageUrl} alt={appointment.doctor.name} />
                              ) : (
                                <div className="avatar-placeholder">
                                  {appointment.doctor.name.split(' ').map(n => n[0]).join('')}
                                </div>
                              )}
                            </div>
                            <div className="doctor-info">
                              <div className="doctor-name">{appointment.doctor.name}</div>
                              <div className="doctor-specialty">{appointment.doctor.specialty}</div>
                            </div>
                          </div>
                          
                          <div className="appointment-reason">
                            {appointment.reason}
                          </div>
                          
                          {appointment.type === 'Video Consultation' && (
                            <div className="appointment-actions">
                              <button className="join-meeting-btn">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                  <polygon points="23 7 16 12 23 17 23 7"></polygon>
                                  <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                                </svg>
                                Join Meeting
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                </div>
                
                <div className="all-appointments">
                  <div className="list-section-header">
                    <h3>All Appointments</h3>
                  </div>
                  
                  {appointments
                    .sort((a, b) => new Date(b.dateTime) - new Date(a.dateTime))
                    .map(appointment => (
                      <div key={appointment.id} className="appointment-card" onClick={() => viewAppointmentDetail(appointment.id)}>
                        <div className="appointment-date">
                          <div className="date">{formatDate(appointment.dateTime)}</div>
                          <div className="time">{formatTime(appointment.dateTime)}</div>
                        </div>
                        
                        <div className="appointment-content">
                          <div className="appointment-header">
                            <div className="appointment-type">{appointment.type}</div>
                            <div className={`appointment-status ${getAppointmentStatusColor(appointment.status)}`}>
                              {appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}
                            </div>
                          </div>
                          
                          <div className="appointment-doctor">
                            <div className="doctor-avatar">
                              {appointment.doctor.imageUrl ? (
                                <img src={appointment.doctor.imageUrl} alt={appointment.doctor.name} />
                              ) : (
                                <div className="avatar-placeholder">
                                  {appointment.doctor.name.split(' ').map(n => n[0]).join('')}
                                </div>
                              )}
                            </div>
                            <div className="doctor-info">
                              <div className="doctor-name">{appointment.doctor.name}</div>
                              <div className="doctor-specialty">{appointment.doctor.specialty}</div>
                            </div>
                          </div>
                          
                          <div className="appointment-reason">
                            {appointment.reason}
                          </div>
                          
                          <div className="appointment-footer">
                            {appointment.prescription && (
                              <div className="prescription-ref">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                  <path d="M9 5H7a4 4 0 0 0-4 4v0a4 4 0 0 0 4 4h7m4-8h-3M1 19l3 3 3-3M6 11v.01M2 8v.01M4 15v.01"></path>
                                  <path d="M20 8a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2Z"></path>
                                </svg>
                                <span>Prescription: {appointment.prescription}</span>
                              </div>
                            )}
                            <button className="view-details-btn">
                              View Details
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <line x1="5" y1="12" x2="19" y2="12"></line>
                                <polyline points="12 5 19 12 12 19"></polyline>
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            )}
            
            {appointmentView === 'calendar' && (
              <div className="calendar-view">
                <div className="calendar-placeholder">
                  <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                  </svg>
                  <h3>Calendar View</h3>
                  <p>Calendar view is coming soon. Please use the list view for now.</p>
                </div>
              </div>
            )}
            
            {appointmentView === 'detail' && selectedAppointment && (
              <div className="appointment-detail">
                <div className="detail-header">
                  <button className="back-button" onClick={backToAppointmentList}>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <line x1="19" y1="12" x2="5" y2="12"></line>
                      <polyline points="12 19 5 12 12 5"></polyline>
                    </svg>
                    Back to Appointments
                  </button>
                  <div className="appointment-actions">
                    {selectedAppointment.status === 'scheduled' && (
                      <>
                        {selectedAppointment.type === 'Video Consultation' && selectedAppointment.meetingLink && (
                          <a href={selectedAppointment.meetingLink} target="_blank" rel="noopener noreferrer" className="action-button join">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                              <polygon points="23 7 16 12 23 17 23 7"></polygon>
                              <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                            </svg>
                            Join Video Consultation
                          </a>
                        )}
                        <button className="action-button reschedule">
                          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M1 4v6h6"></path>
                            <path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"></path>
                          </svg>
                          Reschedule
                        </button>
                        <button className="action-button cancel">
                          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <line x1="18" y1="6" x2="6" y2="18"></line>
                            <line x1="6" y1="6" x2="18" y2="18"></line>
                          </svg>
                          Cancel
                        </button>
                      </>
                    )}
                    <button className="action-button download">
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                        <polyline points="7 10 12 15 17 10"></polyline>
                        <line x1="12" y1="15" x2="12" y2="3"></line>
                      </svg>
                      Download
                    </button>
                  </div>
                </div>
                
                <div className="appointment-detail-content">
                  <div className="appointment-overview">
                    <div className="appointment-header-detail">
                      <div className="appointment-type-badge">
                        {selectedAppointment.type === 'Video Consultation' ? (
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <polygon points="23 7 16 12 23 17 23 7"></polygon>
                            <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                          </svg>
                        ) : (
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                            <polyline points="9 22 9 12 15 12 15 22"></polyline>
                          </svg>
                        )}
                        <h2>{selectedAppointment.type}</h2>
                      </div>
                      <div className={`appointment-status-badge ${getAppointmentStatusColor(selectedAppointment.status)}`}>
                        {selectedAppointment.status.charAt(0).toUpperCase() + selectedAppointment.status.slice(1)}
                      </div>
                    </div>
                    
                    <div className="appointment-datetime">
                      <div className="datetime-item">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                          <line x1="16" y1="2" x2="16" y2="6"></line>
                          <line x1="8" y1="2" x2="8" y2="6"></line>
                          <line x1="3" y1="10" x2="21" y2="10"></line>
                        </svg>
                        <span>{formatDateTime(selectedAppointment.dateTime)}</span>
                      </div>
                      <div className="datetime-item">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <circle cx="12" cy="12" r="10"></circle>
                          <polyline points="12 6 12 12 16 14"></polyline>
                        </svg>
                        <span>Duration: {selectedAppointment.duration} minutes</span>
                      </div>
                    </div>
                    
                    <div className="appointment-reason-detail">
                      <h3>Reason for Visit</h3>
                      <p>{selectedAppointment.reason}</p>
                    </div>
                  </div>
                  
                  <div className="appointment-sections">
                    <div className="appointment-section doctor-section">
                      <h3>
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                          <circle cx="12" cy="7" r="4"></circle>
                        </svg>
                        Doctor Information
                      </h3>
                      <div className="doctor-profile">
                        <div className="doctor-avatar-large">
                          {selectedAppointment.doctor.imageUrl ? (
                            <img src={selectedAppointment.doctor.imageUrl} alt={selectedAppointment.doctor.name} />
                          ) : (
                            <div className="avatar-placeholder large">
                              {selectedAppointment.doctor.name.split(' ').map(n => n[0]).join('')}
                            </div>
                          )}
                        </div>
                        <div className="doctor-details">
                          <h4>{selectedAppointment.doctor.name}</h4>
                          <div className="doctor-specialty">{selectedAppointment.doctor.specialty}</div>
                        </div>
                      </div>
                    </div>
                    
                    {selectedAppointment.type === 'Video Consultation' ? (
                      <div className="appointment-section meeting-section">
                        <h3>
                          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <polygon points="23 7 16 12 23 17 23 7"></polygon>
                            <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                          </svg>
                          Meeting Information
                        </h3>
                        <div className="meeting-details">
                          {selectedAppointment.meetingLink ? (
                            <>
                              <p>Use the link below to join your video consultation at the scheduled time:</p>
                              <div className="meeting-link">
                                <input type="text" value={selectedAppointment.meetingLink} readOnly />
                                <button className="copy-link-btn">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                                  </svg>
                                  Copy
                                </button>
                              </div>
                              {selectedAppointment.status === 'scheduled' && (
                                <div className="join-link">
                                  <a href={selectedAppointment.meetingLink} target="_blank" rel="noopener noreferrer" className="join-meeting-btn-large">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                      <polygon points="23 7 16 12 23 17 23 7"></polygon>
                                      <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                                    </svg>
                                    Join Video Consultation
                                  </a>
                                </div>
                              )}
                            </>
                          ) : (
                            <p>Meeting link will be available once the appointment is confirmed.</p>
                          )}
                        </div>
                      </div>
                    ) : (
                      <div className="appointment-section location-section">
                        <h3>
                          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                            <circle cx="12" cy="10" r="3"></circle>
                          </svg>
                          Location Information
                        </h3>
                        <div className="location-details">
                          {selectedAppointment.location ? (
                            <>
                              <div className="location-name">{selectedAppointment.location.name}</div>
                              <div className="location-address">
                                <p>{selectedAppointment.location.address}</p>
                                <p>{selectedAppointment.location.city}, {selectedAppointment.location.zipCode}</p>
                              </div>
                              {selectedAppointment.location.phoneNumber && (
                                <div className="location-phone">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                                  </svg>
                                  <span>{selectedAppointment.location.phoneNumber}</span>
                                </div>
                              )}
                              <div className="location-map">
                                <div className="map-placeholder">
                                  <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                                    <circle cx="12" cy="10" r="3"></circle>
                                  </svg>
                                  <span>Map View</span>
                                </div>
                              </div>
                            </>
                          ) : (
                            <p>Location details will be provided once the appointment is confirmed.</p>
                          )}
                        </div>
                      </div>
                    )}
                    
                    {selectedAppointment.notes && (
                      <div className="appointment-section notes-section">
                        <h3>
                          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <path d="M14 2v6h6"></path>
                            <path d="M16 13H8"></path>
                            <path d="M16 17H8"></path>
                            <path d="M10 9H8"></path>
                          </svg>
                          Notes & Instructions
                        </h3>
                        <div className="notes-content">
                          {selectedAppointment.notes}
                        </div>
                      </div>
                    )}
                    
                    {selectedAppointment.prescription && (
                      <div className="appointment-section prescription-section">
                        <h3>
                          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M9 5H7a4 4 0 0 0-4 4v0a4 4 0 0 0 4 4h7m4-8h-3M1 19l3 3 3-3M6 11v.01M2 8v.01M4 15v.01"></path>
                            <path d="M20 8a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2Z"></path>
                          </svg>
                          Related Prescription
                        </h3>
                        <div className="prescription-link">
                          <div className="prescription-id">{selectedAppointment.prescription}</div>
                          <button className="view-prescription-btn" onClick={() => {
                            setActiveSection('prescriptions');
                            viewPrescriptionDetail(selectedAppointment.prescription);
                          }}>
                            View Prescription
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                              <line x1="5" y1="12" x2="19" y2="12"></line>
                              <polyline points="12 5 19 12 12 19"></polyline>
                            </svg>
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default Dashboard; 